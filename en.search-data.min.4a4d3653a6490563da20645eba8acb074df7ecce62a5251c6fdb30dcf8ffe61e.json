[{"id":0,"href":"/complate/docs/adrs/1-usage-of-adrs/","title":"1: Usage of ADRs","section":"ADRs","content":"Table of Contents 1: Usage of ADRs   1: Usage of ADRs This project uses ADRs. ADRs are documented in this repository and format. In doubt, the documents in this repository and documentation are to be considered as the single source of truth.\n   "},{"id":1,"href":"/complate/docs/adrs/2-usage-of-keywords/","title":"2: Usage of keywords","section":"ADRs","content":"Table of Contents 2: Usage of keywords   2: Usage of keywords The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document and in all documents in it\u0026#8217;s subtree as well as all documents that are directly related to this document are to be interpreted as described in BCP 14, RFC2119 and RFC8174 when, and only when, they appear in all capitals, as shown here.\n   "},{"id":2,"href":"/complate/docs/status/","title":"Status","section":"Docs","content":"    \n \n \n \n   \n \n \n     "},{"id":3,"href":"/complate/docs/adrs/3-versioning/","title":"3: Versioning","section":"ADRs","content":"Table of Contents 3: Versioning   3: Versioning This project makes use of the semver v2 versioning scheme for all parts of the official public API. The public stable API is a subset of all available features (see this page).\n   "},{"id":4,"href":"/complate/docs/installation/","title":"Installation","section":"Docs","content":"Table of Contents Installation The Rust way (via cargo)     Installation The Rust way (via cargo) The --force flag is necessary for updating the version.\n cargo install complate --force      "},{"id":5,"href":"/complate/docs/adrs/4-experimental-flag/","title":"4: Experimental flag","section":"ADRs","content":"Table of Contents 4: Experimental flag   4: Experimental flag There is a application level argument (flag) experimental (-e | --experimental) that indicates that experimental features can now be accessed. This flag explicitly marks features that are NOT part of the official public API and therefore NOT considered when applying the versioning scheme (see ADR 3).\nThis flag is designed to be used with and therefore CAN be used with feature Flags as specified in ADR 5.\n   "},{"id":6,"href":"/complate/docs/command-reference/","title":"Command reference","section":"Docs","content":"Table of Contents Disclaimer Features backend+   Application level arguments Commands render command flags Examples:   Configuration file   Disclaimer All features that are marked as experimental are not considered a public API and therefore eplicitly not covered by the backwards-compatibility policy inside a major version (see semver v2). Use these features on your own risk!\n   Features     Name Description Default     backend+cli\n The CLI backend which maps to the original dialoguer implementation.\n Yes\n   backend+ui\n The UI backend which maps to the new cursive/fui implementation.\n No\n    backend+ Either one of the backend+ features (or both) MUST be enabled for complate to work (it won\u0026#8217;t compile otherwise).\n    Application level arguments     Name Short Long Description     Experimental\n -e\n --experimental\n Activates experimental features that are not stable yet. All features that are marked as experimental are ignored when keeping backwards compatibility inside one major version.\n      Commands     Command Description Status     help\n Prints the help to STDOUT.\n stable\n   init\n Initializes the default configuration in ./.complate/config.yaml\n stable\n   render\n Prompts for the template, prompts for variable values and renders the data to STDOUT\n stable\n      render command flags     Name Short Long Description Remark Status     Config\n -c\n --config\n The path to the configuration file that shall be used. This path can be relative or absolute. The default path is ./complate/config.yaml.\n When setting this argument to pipe (-), the config is parsed from the STDIN descriptor to the render command.\n stable for file path, experimental for STDIN descriptor. Pipe is only supported for UI backend\n   Shell trust\n  --shell-trust\n Enables the shell value provider for replacing template placeholders. Due to the potential security risk with this option, it is disabled by default. Possible values for this option are none (default), prompt and ultimate\n  stable\n   Template\n -t\n --template\n Skip the template selection by defining the used template from the configuration via this argument\n  stable\n   Backend\n -b\n --backend\n Defines the backend for the user interaction.\n  CLI is stable. UI is experimental (feature = \"backend+ui\").\n   Value\n -v\n --value\n Overrides a certain variable with a given string value. Specify the variable and value with an equals sign as separator\n Multiple allowed. Example: \u0026lt;br/\u0026gt; -v\"variable=some arbitrary value\"\n experimental\n    Examples:   complate render\n  complate render -c .complate/alternative.yml\n  complate -e render -c \u0026lt;(cat .complate/alternative.yaml) -bui -t0.default\n      Configuration file Please find an example amd the documentation for the configuration format in the wiki.\nThe templates for this project that can be found in ./complate/config.yaml.\n   "},{"id":7,"href":"/complate/docs/configuration/","title":"Configuration","section":"Docs","content":"Table of Contents Introduction Structure by example Template variables and values     Introduction The complate configuration schema written in YAML. It includes a version number that needs to be equal to the major version of the installed complate instance.\nBootstrap the configuration file in ./.complate/config.yaml by using the complate init command.\n   Structure by example version: 0.10 templates: one: content: file: ./.complate/templates/arbitraty-template-file.tpl values: a.summary: static: \"random summary\" two: content: inline: |- {{ a.alpha }} {{ b.bravo }} {{ c.charlie }} {{ d.delta }} {{ e.echo }} values: a.alpha: prompt: \"alpha\" b.bravo: shell: \"printf bravo\" c.charlie: static: \"charlie\" d.delta: select: text: Select the version level that shall be incremented options: alpha: display: alpha value: static: alpha bravo: display: bravo value: shell: printf bravo e.echo: check: text: Select the components that are affected separator: \", \" options: alpha: display: alpha value: static: alpha bravo: display: bravo value: shell: printf bravo   The first tag has the current version of the configuration schema. It needs to be equal to the major version number of the cli program. Since complate is still sub-one, the versioning is not yet stable and therefore, the major and minor version need to be equal to the ones of the cli program.\nBut now the important part, the templates. complate supports two types of loading templates. One is a file reference (relative or absolute), the other one is specifying the template inline in the configuration. This should be rather self explanatory by the example above.\n Template variables and values The variables inside the template content are defined in the handlebars syntax (\u0026#8220;{{ xyz }}\u0026#8221;). These variables need a corresponding declaration on how to resolve the value for it under the values section of the template.\nYou can resolve the value for each variable individual. Following options are available:\n     Key Behaviour Input Remark     static\n Simply replaces the variable with a static value\n None\n    prompt\n Asks the user for text input (can be empty)\n The prompt\n    shell\n Invokes a shell command to resolve the variable (read from STDOUT)\n None\n See shell security\n   select\n Asks the user to select one item from a list\n text: string (context), options: list (available options to select from)\n    check\n Asks the user to select 0..n item(s) from a list (multiselect)\n text: string (context), options: list of options {display: str, value: str} (the available options to select from)\n     Shell security Since the shell value provider is able to run arbitrary shell commands, it is only allowed if and only if the SHELL_TRUST argument is explicitly set. See the render command reference for possible values for this setting. If not set, the provider will throw an unrecoverable error and the program will abort.\n     "},{"id":8,"href":"/complate/docs/adrs/5-feature-flags/","title":"5: Feature flags","section":"ADRs","content":"Table of Contents 5: Feature flags   5: Feature flags This project makes use of cargo feature flags. Feature flags count as part of the public API and are therefore to be considered when applying the version rules IF NOT marked as experimental (see ADR 4).\nAll feature flags MUST be documented in an appropriate manner in the documentation.\n   "}]